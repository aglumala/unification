package org.algorithm.impl;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.algorirthm.util.FileInput;
import org.algorirthm.util.Log4JExample;
import org.algorithm.impl.SimpleTypeImp.Simple;
import org.algorithm.intf.SimpleType;
import org.algorithm.intf.Type;
import org.jdom.Attribute;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;


//Main Parser class for wsdl
public class WSDLParser3 {
	/*map contains all the Types obtained from a given wsdl.
	 * You could persist it every time you finish parsing a wsdl to permanently store parsed records.
	 * acts as an abstract dictionary
	 */
	public static final Log4JExample log4JExample;
	
	static{
		 log4JExample=new Log4JExample();
	}
	
	private Map<String, Type> localMap=null;
	
	public  Map<String, Type> getTypeMap(){
		return localMap;
	}
public void process(Element element, Map<String, Type> localMap) {
	
	inspectHybrid(element, localMap);
    
    List content = element.getContent();
    Iterator iterator = content.iterator();
    
    while (iterator.hasNext()) {
      Object o = iterator.next();
      if (o instanceof Element) {
        Element child = (Element) o;
        process(child, localMap);
        
      }
    }
  }
//assumption:the elements in the each original complex type are all simple types
public List<Type> getAllTNS(Map<String, Type> localMap, String tnsType){
	
	List<Type> types=new ArrayList<Type>();
	if(tnsType.startsWith("tns:")){
		
		String tnsName=tnsType.substring(tnsType.indexOf(":")+1);
		

		  if(localMap.containsKey(tnsName.trim())){
				
				Type originalComplex=localMap.get(tnsName.trim());
				if(originalComplex instanceof SequenceType){
					
					SequenceType t1=(SequenceType)originalComplex;
					
					return t1.getElements();
				}
				if(originalComplex instanceof ChoiceType){
					
					ChoiceType t2=(ChoiceType)originalComplex;
					
					return t2.getElements();
				}
				if(originalComplex instanceof AllComplexType){
					
					AllComplexType t3=(AllComplexType)originalComplex;
					
					return t3.getElements();
				}
		  }
		  
	}
	 
	return types; //will always be an empty set.
	
}
public  void inspectHybrid(Element element, Map<String, Type> localMap) { 
	
	  	SimpleTypeImp simple=null;
	  	SequenceType seqComplex=null;
	    
	    String type=null;
	    Namespace namespace = element.getNamespace();
	    try{ //all adElementType() methods will throw  a CannotAddTypeToCollectionException
			
	    	
	    if (namespace != Namespace.NO_NAMESPACE) {
	      
	      String elementName=element.getAttributeValue("name");
	      
	      Element parentElement=element.getParent();
	     
	      //handle sequence element <schema><complex><sequence><element>...</element></sequence></complex>....</schema>
	      if(parentElement!=null && parentElement.getName().equals("sequence")){
	    	  
	    	  type=getTypeAttribute(element);
	    	  
	    	  Element parent2=parentElement.getParent();
	    	  
	    	  if(parent2!=null && parent2.getName().equals("complexType")){
	    		  
	    		  Element parent3=parent2.getParent();
	    		  
	    		  if(parent3!=null && parent3.getName().equals("element")){
	    			  
	    			  String complexTypeName=parent3.getAttributeValue("name");
	    			  
	    			if(type!=null){
	    				
	    				if(localMap.containsKey(complexTypeName)){
	    					
	    					  Type complexType=localMap.get(complexTypeName);
	    					  if(complexType instanceof SequenceType){
	    						 
	    						  List<Type> elements=getAllTNS(localMap, type);
	    						  
	    						  if(elements!=null){

	    							  for (Type simpleType : elements) {
	    								  if(simpleType instanceof SimpleTypeImp){
	    									  SimpleTypeImp simp=(SimpleTypeImp)simpleType;
	    									  
	    									  ((SequenceType)complexType).addElementType(simp.getTypeName(), simp.getName());
	    								  }
	    							}
	    						  }else{
	    						  		System.out.println("TYPE TYPE "+type);
	    						  	}
	    						  ((SequenceType)complexType).addElementType(type, elementName);
								localMap.put(complexTypeName, complexType);
	    					  }
	    					  
	    				 }else{	  
	    					seqComplex=new SequenceType();
	    			    	seqComplex.setName(complexTypeName);
	    			    	 //check for TNS first
	    			    	List<Type> elements=getAllTNS(localMap, type);
	    			    	
	    			    	if(elements!=null){
  							  for (Type simpleType : elements) {
  								  if(simpleType instanceof SimpleTypeImp){
  									  SimpleTypeImp simp=(SimpleTypeImp)simpleType;
  									  seqComplex.addElementType(simp.getTypeName(), simp.getName());
  								  }
  							  }
  						  	}else{
  						  		System.out.println("TYPE TYPE "+type);
  						  	}
	    			    	seqComplex.addElementType(type, elementName);
							localMap.put(complexTypeName, seqComplex);
	    			    	  
	    				  }
	    				    				 
	    			  	  //System.out.println(" Sequence Element=("+parent3.getName()+") Name =("+complexTypeName+")");
	    			  
	    				}
	    			
	    		  }else if(parent3!=null && parent3.getName().equals("schema")){
	    			  
	    			  String complexTypeName=parent2.getAttributeValue("name");    			  
	    			 
	    			  if(type!=null){
	    				  //set the name of the sequence complex type
		    			 
	    				  //simple=new SimpleTypeImp(type, elementName);
	    				if(localMap.containsKey(complexTypeName)){
	    					
	    					  Type complexType=localMap.get(complexTypeName);
	    					  
	    					  if(complexType instanceof SequenceType){
	    						  
	    						  SequenceType seq=(SequenceType)complexType;
	    						  seq.addElementType(type, elementName);
	    						  
	    						  //check for TNS first
	    						  List<Type> elements=getAllTNS(localMap, type);
	    						 // log4JExample.log(type+" SEQUENCE PLAIN LIST SIZE "+elements.size());
	    						  if(elements!=null){
	    							  for (Type simpleType : elements) {
	    								  if(simpleType instanceof SimpleTypeImp){
	    									  SimpleTypeImp simp=(SimpleTypeImp)simpleType;
	    									  seq.addElementType(simp.getSimple().getTypeName(), simp.getName());
	    									  
	    								  }
	    							}
	    							  
	    							  for(Type type2 : seq.getElements()) {
	    								  SimpleTypeImp simp2=(SimpleTypeImp)type2;
	    								  System.out.println(seq.getName()+" ELEMENT ( "+simp2.getName()+") TYPE ("+simp2.getSimple().getTypeName()+")");
	    									 
	    							  }
	    							  
	    						  }
	    						
	    						  
	    						  
	    						  
	    						  localMap.put(complexTypeName, complexType);
	    					  }
	    				  }else{	  
	    					seqComplex=new SequenceType();
	    			    	seqComplex.setName(complexTypeName);
	    			    	 //check for TNS first
	    			    	List<Type> elements=getAllTNS(localMap, type);
	    			    	//log4JExample.log(type+" SEQUENCE REST LIST SIZE "+elements.size());
  						  	if(elements!=null){
  							  for (Type simpleType : elements) {
  								  
  								  if(simpleType instanceof SimpleTypeImp){
  									  SimpleTypeImp simp=(SimpleTypeImp)simpleType;
  									  //System.out.println(seqComplex.getName()+" ADDING ELEMENT "+simp.getSimple().getTypeName()+" "+simp.getName());
  									  seqComplex.addElementType(simp.getSimple().getTypeName(), simp.getName());
  								  }
  							  }
  						  	}
	    			    	seqComplex.addElementType(type, elementName);
							localMap.put(complexTypeName, seqComplex);
	    			    	  
	    				  }
		    			//System.out.println(" Sequence Element=("+parent3.getName()+") Name =("+complexTypeName+")");
		    			}
	    			  //System.out.println();
	    		  }
	    		  
	   //handle sequence element <schema><complex><complexContent><extension><sequence><element>...
	    //</element></sequence></extension></complexContent></complex>....</schema>
	    	      	  
	    	  }else if(parent2!=null && parent2.getName().equals("extension")){
	    		  
	    		  Element parentExt=parent2.getParent();
	    		  if(parentExt!=null && parentExt.getName().equals("complexContent")){
	    			  
	    			  Element parentCmplxContent=parentExt.getParent();
	    			  
	    			  if(parentCmplxContent!=null && parentCmplxContent.getName().equals("complexType")){
	    				  	
	    				  String complexTypeName=parentCmplxContent.getAttributeValue("name");
	    				  if(type!=null){
	    					  //simple=new SimpleTypeImp(type, elementName);
	    					  
	    					  
		    				  if(localMap.containsKey(complexTypeName)){
		    					  Type complexType=localMap.get(complexTypeName);
		    					  if(complexType instanceof SequenceType){
		    						  //check for TNS first
		    						  List<Type> elements=getAllTNS(localMap, type);
		    						  if(elements!=null){
		    							  for (Type simpleType : elements) {
		    								  if(simpleType instanceof SimpleTypeImp){
		    									  SimpleTypeImp simp=(SimpleTypeImp)simpleType;
		    									  ((SequenceType)complexType).addElementType(simp.getSimple().getTypeName(), simp.getName());
		    								  }
		    							}
		    						  }
		    						  ((SequenceType)complexType).addElementType(type, elementName);
		    						  localMap.put(complexTypeName, complexType);
		    					  }
		    				  }else{	  
		    					seqComplex=new SequenceType();
		    			    	seqComplex.setName(complexTypeName);
		    			    	
		    			    	 //check for TNS first
		    			    	List<Type> elements=getAllTNS(localMap, type);
	    						  if(elements!=null){
	    							  for (Type simpleType : elements) {
	    								  if(simpleType instanceof SimpleTypeImp){
	    									  SimpleTypeImp simp=(SimpleTypeImp)simpleType;
	    									  seqComplex.addElementType(simp.getSimple().getTypeName(), simp.getName());
	    								  }
	    							}
	    						  }
		    			    	seqComplex.addElementType(type, elementName);
		    			    	localMap.put(complexTypeName, seqComplex);
		    			    	 
		    				  }
			    			}
	    				  
	    			  }
	    		  }
	    	  }
	     }
	     
	      handleStandaloneElement(element, localMap);
	      handleChoiceElement(element, localMap);
	      handleAllComplex(element, localMap);
	    }
	    
  		} catch (CannotAddTypeToCollectionException e) {
		
  			e.printStackTrace();
  		}
	   
	  }
  private void handleAllComplex(Element element, Map<String, Type> localMap){
	  String type=null;
	  String elementName=null;
	  Element parentElement=element.getParent();
	  AllComplexType allComplex=null;

 	 try {
	  if(element.getName().equals("element")&& parentElement!=null && parentElement.getName().equals("all")&&
			  parentElement.getParent().getName().equals("complexType") 
			  && parentElement.getParent().getParent().getName().equals("schema")){
		  
		  String allComplexTypeName=parentElement.getParent().getAttributeValue("name");
		
		  type = getTypeAttribute(element);
		
		  elementName=element.getAttributeValue("name"); //the element name is not stored in the simpletype 4now
		if(type!=null){
			
			if(localMap.containsKey(allComplexTypeName)){
				  Type complexType=localMap.get(allComplexTypeName);
				  if(complexType instanceof AllComplexType){
					 List<Type> elements=getAllTNS(localMap, type);
						  if(elements!=null){
							  for (Type simpleType : elements) {
								  if(simpleType instanceof SimpleTypeImp){
									  SimpleTypeImp simp=(SimpleTypeImp)simpleType;
									  ((AllComplexType)complexType).addElementType(simp.getSimple().getTypeName(), simp.getName());
								  }
							}
					 }
						  
					((AllComplexType)complexType).addElementType(type, elementName);
					
					 localMap.put(allComplexTypeName, complexType);
				  }
			  }else{
				  allComplex=new AllComplexType();
				  allComplex.setName(allComplexTypeName);
				  List<Type> elements=getAllTNS(localMap, type);
				  
				  if(elements!=null){
					  for (Type simpleType : elements) {
						  if(simpleType instanceof SimpleTypeImp){
							  SimpleTypeImp simp=(SimpleTypeImp)simpleType;
							  allComplex.addElementType(simp.getSimple().getTypeName(), simp.getName());
						  }
					}
				  }
		    	allComplex.addElementType(type, elementName);
				localMap.put(allComplexTypeName, allComplex);
		    }
		}
	 }
	  } catch (CannotAddTypeToCollectionException e) {
			
			e.printStackTrace();
  	 }
  }
  private void handleStandaloneElement(Element element, Map<String, Type> localMap){
	  
	  String type=null;
	  Element parentElement=element.getParent();
	  SimpleTypeImp simpleType=null;
	  
	//handle standalone element without restrictions
      if(element.getName().equals("element")&& parentElement!=null && parentElement.getName().equals("schema")&& element.getChildren().isEmpty()){
    	  
    	  String name=element.getAttributeValue("name");
    	  type=getTypeAttribute(element);
    	  //System.out.println("Simple Element= ("+element.getName()+") Name = ("+name+")");
    	  
    	  //create a simple type
    	  simpleType=new SimpleTypeImp(type, name);
    	  //add it to the type set.
    	  localMap.put(name, simpleType);
    	  //System.out.println();
    	  
      }
      if(parentElement!=null && parentElement.getName().equals("restriction")){
    	  
    	  type=parentElement.getAttributeValue("base");
    	  
    	  Element restrictionParent=parentElement.getParent();
    	  if(restrictionParent!=null && restrictionParent.getName().equals("simpleType")){
    		  
    		  String name=restrictionParent.getAttributeValue("name");
    		  if(restrictionParent.getParent()!=null && restrictionParent.getParent().getName().equals("schema")){
    			  //create a simple type with restrictions
    			  
    			  simpleType=new SimpleTypeImp(type, name);
        		  
        		  localMap.put(name, simpleType);
        		  
    		  }
    	  }
    }
  }
  private void handleChoiceElement(Element element, Map<String, Type> localMap){
	
	  String name=element.getAttributeValue("name");
	
	  SimpleType simple=null;
	  ChoiceType choiceComplex=null;
	  String type=null;
	  Element parentElement=element.getParent();
	  
	  try { 
	  
      if(element.getName().equals("element")&& parentElement!=null && parentElement.getName().equals("choice")){
    	  
    	  choiceComplex=new ChoiceType();
    	  
    	  type=getTypeAttribute(element);
    	 // System.out.println("TYPE "+type);
    	  
    	  Element parent2=parentElement.getParent();
    	  if(parent2!=null && parent2.getName().equals("complexType")){
    		  
    		  //System.out.println("Complex Element "+parent2.getQualifiedName());
    		  Element parent3=parent2.getParent();
    		  
    		  if(parent3!=null && parent3.getName().equals("element")){
    			  
    			 // System.out.println("TYPE 1 CHOICE");
    			  String complexTypeName=parent3.getAttributeValue("name");
    			  //System.out.println("Parent Element =("+parent3.getName()+") Name =("+complexTypeName+")");  
    			  if(type!=null){
	    			//Create Sequence type
	    			//simple=new SimpleTypeImp(type, name);
	    			
	    				 List<Type> elements=getAllTNS(localMap, type);
	   				  
	   				  if(elements!=null){
	   					  for (Type simpleType : elements) {
	   						  if(simpleType instanceof SimpleTypeImp){
	   							  SimpleTypeImp simp=(SimpleTypeImp)simpleType;
	   							  choiceComplex.addElementType(simp.getSimple().getTypeName(), simp.getName());
	   						  }
	   					}
	   				  }
					choiceComplex.addElementType(type, name);
					
	    			choiceComplex.setName(complexTypeName);
	    			//add the choice complex to the map
	    			localMap.put(complexTypeName, choiceComplex);
	    			
	    			//System.out.println(" Choice Element=("+parent3.getName()+") Name =("+complexTypeName+")");
	    			
	    		}
    			  //System.out.println();
    		}else if(parent3!=null && parent3.getName().equals("schema")){
    			  
    			  //System.out.println("TYPE 2 CHOICE");
    			  String complexTypeName=parent2.getAttributeValue("name");
    			  
    			getAllTNS(localMap, type);
    			 List<Type> elements=getAllTNS(localMap, type);
  				  
  				  if(elements!=null){
  					  for (Type simpleType : elements) {
  						  if(simpleType instanceof SimpleTypeImp){
  							  SimpleTypeImp simp=(SimpleTypeImp)simpleType;
  							  choiceComplex.addElementType(simp.getSimple().getTypeName(), simp.getName());
  						  }
  					}
  				  }
				choiceComplex.addElementType(type, name);
    			//add the choice complex to the set
    			localMap.put(complexTypeName, choiceComplex);		  
    		}
    	  }
      }
      } catch (CannotAddTypeToCollectionException e) {
			
		  e.printStackTrace();
	  }
  }
  
  private  String getTypeAttribute(Element element){
	  List attributes = element.getAttributes();
	  String value=null;
	    if (!attributes.isEmpty()) {
	      Iterator iterator = attributes.iterator();
	      while (iterator.hasNext()) {
	        Attribute attribute = (Attribute) iterator.next();
	        String name = attribute.getName();
	        value = attribute.getValue();
	        
	        Namespace attributeNamespace = attribute.getNamespace();
	        
	        if (attributeNamespace == Namespace.NO_NAMESPACE) {
	        
	        	if("type".equals(name)){
	        	  //get the type of the element
	        	  //System.out.println("TYPE "+value);
	        	 return value;
	        	}
	        }
	        else {
	          String prefix = attributeNamespace.getPrefix();
	          
	          if("type".equals(name)){
	        	  //System.out.println("TYPE "+value);
	        	  //System.out.println("  " + prefix + ":" + name + "=\"" + value + "\"");
	        	  return value;      	   
	          }	          
	        }
	      }
	    }
	    
	    return value;
  }
  public static void main(String[] args) {
	  
		
	  	String plan="file:///home/lumala/Desktop/unifalgo/TypeEquivFinal/sampleFiles/TravelScenario2.xsd";
		 
		 // String plan="http://ws.henoo.net/flights.asmx?wsdl";
		 //String plan="C:/eclipseProjects/TypeEquiv/sampleFiles/benchMarkTackerXMLSchema.xsd";
		 final Set<TypeMap> parsedWsdlSet=new HashSet<TypeMap>();
		 List<String> wsdlURL=new ArrayList<String>();
		 wsdlURL.add(plan);
		 /*
		 String[] wsdlURL={
				 plan,
				 "http://ts.afnt.co.uk/travelSearch.asmx?WSDL"
				
		};
		*/
		 for (Iterator<String> iterator = FileInput.readInput().iterator(); iterator.hasNext();) {
			 String string=iterator.next();
			 wsdlURL.add(string);
			
		}
		
		
	     //parse all wsdls in the array
	    String CurLine = ""; // Line read from standard in
	    
	    System.out.println("Enter 'q' to exit: Enter any other letter to continue ");
	    InputStreamReader converter = new InputStreamReader(System.in);
	    BufferedReader in = new BufferedReader(converter);
	    try {
	    	
	    //CurLine = in.readLine();
	    while (!((CurLine=in.readLine()).equals("q"))){
	    	
	    System.out.println("You typed: " + CurLine);
	    System.out.println("...STARTING TO PARSE ALL WSDLs");
	      for (String url : wsdlURL) {
	    	  if(!url.equals(plan)){
	    		WSDLParser3 parser=new WSDLParser3();
	    		System.out.println("PROCESS WSDL");
	    		Map<String, Type> newlocalMap=new HashMap<String, Type>();
	    		parser.setLocalMap(newlocalMap);
	    		
	    		TypeMap WSDLTypeMap=parser.processWSDL(url, newlocalMap);
			    parsedWsdlSet.add(WSDLTypeMap);
			    
			    }else{
			    	WSDLParser3 parser2=new WSDLParser3();
			    	System.out.println("PROCESS PLAN");
			    	Map<String, Type> localMap2=new HashMap<String, Type>();
			    	parser2.setLocalMap(localMap2);
			    	TypeMap planTypeMap=parser2.processWSDL(url, localMap2);
			    	  parsedWsdlSet.add(planTypeMap);
			    }
	      }	//end for loop
	      System.out.println("...PARSING WSDLs HAS ENDED");
	      System.out.println("...Enter q TO RUN MATCHING ALGORITHMS...");
		}//end while loop
	    
	    	processWSDLSet(parsedWsdlSet, plan);
	    	for (Iterator iterator = parsedWsdlSet.iterator(); iterator.hasNext();) {
				TypeMap typeMap = (TypeMap) iterator.next();
				if(typeMap.getFileName().equals(plan)){
					System.out.println("File NAME "+typeMap.getFileName());
					Map<String, Type> map=typeMap.getLocalMap();
					Set<String>keys=typeMap.getLocalMap().keySet();
					for (String string : keys) {
						//System.out.println("PLAN COMPLEX TYPE KEY "+string);
						Type obj=map.get(string);
						if (obj instanceof SequenceType) {
							
							SequenceType type=(SequenceType)map.get(string);
							List<Type> list=type.getElements();
							
							if(!list.isEmpty()){
								System.out.println("SEQUENCE IN PLAN ("+string+")");
								for (Type type2 : list) {
									SimpleTypeImp stype=(SimpleTypeImp)type2;
									System.out.println(stype.getSimple().getTypeName());
								}
							}else{
								System.out.println("SEQUENCE ("+string+")IN THE PLAN HAS NO SIMPLE TYPES");
							}
						}else if (obj instanceof ChoiceType) {
							
							System.out.println("CHOICE IN PLAN("+string+")");
							ChoiceType type=(ChoiceType)map.get(string);
							if(!type.getElements().isEmpty()){
								for (Type type2 : type.getElements()) {
									SimpleTypeImp stype=(SimpleTypeImp)type2;
									System.out.println(stype.getSimple().getTypeName());
								}
							}
							
						}else if (obj instanceof AllComplexType) {
							System.out.println("ALL COMPLEX IN PLAN("+string+")");
							AllComplexType type=(AllComplexType)map.get(string);
							if(!type.getElements().isEmpty()){
								for (Type type2 : type.getElements()) {
									SimpleTypeImp stype=(SimpleTypeImp)type2;
									System.out.println(stype.getSimple().getTypeName());
								}
							}
						}
					}
				}
				
				
			}
	    	System.out.println("...ALL PROCESSING (PARSING & COMPARISON) HAS ENDED...");
	    } catch (IOException e) {
			
			e.printStackTrace();
		}
	    
	  } 
 
  public static void processWSDLSet(final Set<TypeMap> parsedWsdlSet, String plan){
	  TypeMap planWSDL=null;
  	
  	for (Iterator iterator = parsedWsdlSet.iterator(); iterator.hasNext();) {
  		TypeMap typeMap = (TypeMap) iterator.next();
  		
  		if(typeMap.getFileName().equals(plan)){
  			planWSDL=typeMap;
  			System.out.println("PLAN "+typeMap.getFileName());
  			break;
  		}
		
  	}
  	
  	for (Iterator iterator = parsedWsdlSet.iterator(); iterator.hasNext();) {
  		
  		TypeMap typeMap = (TypeMap) iterator.next();
  		
  		System.out.println(typeMap.getFileName());
  		
  		if(plan!=null){
  			Map<String, Type> planTypeMap=planWSDL.getLocalMap();
  			Set<String> keySet=planTypeMap.keySet();
  			
  			
  			if(!typeMap.getFileName().equals(plan)){
  				//obtain all other parsed wsdls except the plan
  				Map<String, Type> otherTypes=typeMap.getLocalMap();
  				Set<String> otherTypesKEYS=otherTypes.keySet();
  				for (String key : keySet) {
  					
  					//get each type in the plan and compare it with each type in the parsed WSDL
						Type planType=planTypeMap.get(key);
						
						for (String otherWSDLKey : otherTypesKEYS) {
							
							Type wsdlType=otherTypes.get(otherWSDLKey);
							
							if(MappingDictionary.complexTypeEquivalence(planType, wsdlType)){
								log4JExample.log("Complex ("+planType.getName()+") Matched ("+wsdlType.getName()+
										") From WSDL ("+typeMap.getFileName());
								//System.out.println("Complex ("+planType.getName()+") Matched ("+wsdlType.getName()+
								//		") From WSDL ("+typeMap.getFileName());
								//System.out.println();
							}else if(MappingDictionary.isSimpleComplexTypeEquivalent(planType, wsdlType)){
								
								log4JExample.log("Simple Complex ("+planType.getName()+") Matched ("+wsdlType.getName()+
										") From WSDL ("+typeMap.getFileName());
								//System.out.println("Simple Complex ("+planType.getName()+") Matched ("+wsdlType.getName()+
								//		") From WSDL ("+typeMap.getFileName());
								//System.out.println();
							}else if(MappingDictionary.simpleTypeEquivalence(planType, wsdlType)){
								log4JExample.log("Simple Simple ("+planType.getName()+") Matched ("+wsdlType.getName()+
										") From WSDL ("+typeMap.getFileName());
								//System.out.println("Simple Simple ("+planType.getName()+") Matched ("+wsdlType.getName()+
								//		") From WSDL ("+typeMap.getFileName());
								//System.out.println();
							}else{
								log4JExample.log(planType.getName()+" NOT MATCHING WITH "+wsdlType.getName());
								//System.out.println(planType.getName()+" NOT MATCHING WITH "+wsdlType.getName());
								//System.out.println();
							}
							
						}
					}
  			}
  		}
  	}
  }
  public  TypeMap processWSDL(String url, Map<String, Type> localMap){
	  TypeMap typemap=null;
	  SAXBuilder parser = new SAXBuilder();
	  Document document;
	  try {
		  document = parser.build(url);
		  process(document.getRootElement(), localMap);
		} catch (JDOMException e) {
			e.printStackTrace();
		} 
    	Map<String, Type> map= getTypeMap();
    	    
    	if(!map.isEmpty()){
    	 Set<String> keys=map.keySet();
    	   for (Iterator iterator = keys.iterator(); iterator.hasNext();) {
    			String string = (String) iterator.next();
    				//System.out.println("KEY "+string);
    			Type type=map.get(string);
    			displaySequenceTypes(type);
    			displayChoiceTypes(type);
    			displaySimpleTypes(type);
    			}
    	 	}
    	typemap=new TypeMap(url, map);
    	parser=null;
    	document=null;
    	return typemap;
  }
  //compare all the Types acquired from the WSDL
  public  void compareTypes(Map<String, Type> map){
	  if(!map.isEmpty()){
		  
	    	Set<String> keys=map.keySet();
	    	Type type =  map.get("GetLargestDeclines");
	    	SequenceType one = (SequenceType) type;
	    	for (String key : keys) {
	    		//if(key.equals("Variation")){
	    			Type type2 =  map.get(key);
			    	if (type2 instanceof SequenceType) {
			    		
			    		SequenceType complexType2 = (SequenceType) type2;
			    	}
	    		
	    	}
	    }
}
  
//handle all SequenceTypes in the wsdl
  public  void displaySequenceTypes(Object object){
	  if(object!=null && object instanceof SequenceType) {

			SequenceType type = (SequenceType) object;
			List<Type> list=type.getElements();
				
			if(!list.isEmpty()){
				for (Type type2 : list) {
					SimpleTypeImp simpleType=(SimpleTypeImp)type2;
					
					if(simpleType.getSimple().getTypeName()!=null){
						System.out.println( "Sequence Name ("+type.getName()+")" +
								" Element Type("+simpleType.getSimple().getTypeName()+")");
					}else{
						System.out.println("User Defined Element in Sequence Named "+type.getName());
					}
				}
			}else{
				System.out.println("No Elements in the sequence "+type.getName());
			}
		}
  }
  
  public  void displayChoiceTypes(Object object){
	  
	  if(object!=null && object instanceof ChoiceType) {

			ChoiceType type = (ChoiceType) object;
			List<Type> set=type.getElements();
			
			
			if(!set.isEmpty()){
				for (Type type2 : set) {
					SimpleTypeImp simpleType=(SimpleTypeImp)type2;
					if(simpleType.getSimple()!=null){
						
						System.out.println( "Choice Type Name ("+type.getName()+")" +
								" Element ("+simpleType.getSimple().getTypeName()+")");
					}else{
						System.out.println("User defined Element Simple Type  for Choice Type "+type.getName());
					}
					
				}
					
			}else{
				System.out.println("No Elements in the Choice Type "+type.getName());
			}
		}
  }
  public void displaySimpleTypes(Object object){
	  if(object!=null && object instanceof SimpleType) {

			SimpleTypeImp type = (SimpleTypeImp) object;
			
			Simple simple=type.getSimple();
			if(simple!=null){
				System.out.println("Simple Type "+simple);
			}else{
				System.out.println("User defined Simple Type ");
			}
			
		}
  }
  public void displayAllComplexTypes(Object object){
	  if(object!=null && object instanceof AllComplexType) {

			AllComplexType type = (AllComplexType) object;
			
			List<Type> set=type.getElements();
			if(!set.isEmpty()){
				for (Type type2 : set) {
					SimpleTypeImp simpleType=(SimpleTypeImp)type2;
					System.out.println( "All Complex Type Name ("+type.getName()+")" +
							" Element ("+simpleType.getSimple().getTypeName()+")");	
				}
					
			}else{
				System.out.println("No Elements in the All Complex Type "+type.getName());
			}
		}
  }
  public  void setLocalMap(Map<String, Type> localMap) {
	this.localMap = localMap;
  }
}
